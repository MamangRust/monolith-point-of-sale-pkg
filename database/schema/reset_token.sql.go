// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reset_token.sql

package db

import (
	"context"
	"time"
)

const createResetToken = `-- name: CreateResetToken :one
INSERT INTO reset_tokens (user_id, token, expiry_date)
VALUES ($1, $2, $3)
RETURNING id, user_id, token, expiry_date
`

type CreateResetTokenParams struct {
	UserID     int64     `json:"user_id"`
	Token      string    `json:"token"`
	ExpiryDate time.Time `json:"expiry_date"`
}

func (q *Queries) CreateResetToken(ctx context.Context, arg CreateResetTokenParams) (*ResetToken, error) {
	row := q.db.QueryRowContext(ctx, createResetToken, arg.UserID, arg.Token, arg.ExpiryDate)
	var i ResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiryDate,
	)
	return &i, err
}

const deleteResetToken = `-- name: DeleteResetToken :exec
DELETE FROM reset_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteResetToken(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteResetToken, userID)
	return err
}

const getResetToken = `-- name: GetResetToken :one
SELECT id, user_id, token, expiry_date FROM reset_tokens
WHERE token = $1
`

func (q *Queries) GetResetToken(ctx context.Context, token string) (*ResetToken, error) {
	row := q.db.QueryRowContext(ctx, getResetToken, token)
	var i ResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiryDate,
	)
	return &i, err
}
